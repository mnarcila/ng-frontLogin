/**
 * Servicio Reportes Kallsonys
 * Servicio para generar reportes
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CategoriasRsType } from '../model/categoriasRsType';
import { ClientesRsType } from '../model/clientesRsType';
import { Ordenes2RsType } from '../model/ordenes2RsType';
import { Ordenes3RsType } from '../model/ordenes3RsType';
import { OrdenesRsType } from '../model/ordenesRsType';
import { ProductosRsType } from '../model/productosRsType';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { DetallesCliente } from '../model/detallesCliente';


@Injectable()
export class ReporteService {

    protected basePath = 'http://localhost:9010/OMS/Reportes/v1';
    //protected basePath = 'http://10.39.1.149:9010/OMS/Reportes/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Categorias mas Vendidas por fechas
     * 
     * @param headerRq Cabecera estandar
     * @param serviceID Service Id Kallsonys
     * @param fechaDesde Fecha desde (dd/mm/yyyy)
     * @param fechaHasta Fecha hasta (dd/mm/yyyy)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public categoriasVendidas(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'body', reportProgress?: boolean): Observable<CategoriasRsType>;
    public categoriasVendidas(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CategoriasRsType>>;
    public categoriasVendidas(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CategoriasRsType>>;
    public categoriasVendidas(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (headerRq === null || headerRq === undefined) {
            throw new Error('Required parameter headerRq was null or undefined when calling categoriasVendidas.');
        }

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling categoriasVendidas.');
        }

        if (fechaDesde === null || fechaDesde === undefined) {
            throw new Error('Required parameter fechaDesde was null or undefined when calling categoriasVendidas.');
        }

        if (fechaHasta === null || fechaHasta === undefined) {
            throw new Error('Required parameter fechaHasta was null or undefined when calling categoriasVendidas.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (headerRq !== undefined && headerRq !== null) {
            queryParameters = queryParameters.set('headerRq', <any>headerRq);
        }
        if (serviceID !== undefined && serviceID !== null) {
            queryParameters = queryParameters.set('serviceID', <any>serviceID);
        }
        if (fechaDesde !== undefined && fechaDesde !== null) {
            queryParameters = queryParameters.set('fechaDesde', <any>fechaDesde);
        }
        if (fechaHasta !== undefined && fechaHasta !== null) {
            queryParameters = queryParameters.set('fechaHasta', <any>fechaHasta);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CategoriasRsType>(`${this.basePath}/reporte/categoriasVendidas`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Clientes Facturados en un rango de fechas
     * 
     * @param headerRq Cabecera estandar
     * @param serviceID Service Id Kallsonys
     * @param fechaDesde Fecha desde (dd/mm/yyyy)
     * @param fechaHasta Fecha hasta (dd/mm/yyyy)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clientesFacturados(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'body', reportProgress?: boolean): Observable<ClientesRsType>;
    public clientesFacturados(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ClientesRsType>>;
    public clientesFacturados(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ClientesRsType>>;
    public clientesFacturados(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (headerRq === null || headerRq === undefined) {
            throw new Error('Required parameter headerRq was null or undefined when calling clientesFacturados.');
        }

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling clientesFacturados.');
        }

        if (fechaDesde === null || fechaDesde === undefined) {
            throw new Error('Required parameter fechaDesde was null or undefined when calling clientesFacturados.');
        }

        if (fechaHasta === null || fechaHasta === undefined) {
            throw new Error('Required parameter fechaHasta was null or undefined when calling clientesFacturados.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (headerRq !== undefined && headerRq !== null) {
            queryParameters = queryParameters.set('headerRq', <any>headerRq);
        }
        if (serviceID !== undefined && serviceID !== null) {
            queryParameters = queryParameters.set('serviceID', <any>serviceID);
        }
        if (fechaDesde !== undefined && fechaDesde !== null) {
            queryParameters = queryParameters.set('fechaDesde', <any>fechaDesde);
        }
        if (fechaHasta !== undefined && fechaHasta !== null) {
            queryParameters = queryParameters.set('fechaHasta', <any>fechaHasta);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ClientesRsType>(`${this.basePath}/reporte/clientesFacturados`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ordenes Cerradas
     * 
     * @param headerRq Cabecera estandar
     * @param serviceID Service Id Kallsonys
     * @param fechaDesde Fecha desde (dd/mm/yyyy)
     * @param fechaHasta Fecha hasta (dd/mm/yyyy)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public noOrdenes(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'body', reportProgress?: boolean): Observable<OrdenesRsType>;
    public noOrdenes(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrdenesRsType>>;
    public noOrdenes(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrdenesRsType>>;
    public noOrdenes(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (headerRq === null || headerRq === undefined) {
            throw new Error('Required parameter headerRq was null or undefined when calling noOrdenes.');
        }

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling noOrdenes.');
        }

        if (fechaDesde === null || fechaDesde === undefined) {
            throw new Error('Required parameter fechaDesde was null or undefined when calling noOrdenes.');
        }

        if (fechaHasta === null || fechaHasta === undefined) {
            throw new Error('Required parameter fechaHasta was null or undefined when calling noOrdenes.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (headerRq !== undefined && headerRq !== null) {
            queryParameters = queryParameters.set('headerRq', <any>headerRq);
        }
        if (serviceID !== undefined && serviceID !== null) {
            queryParameters = queryParameters.set('serviceID', <any>serviceID);
        }
        if (fechaDesde !== undefined && fechaDesde !== null) {
            queryParameters = queryParameters.set('fechaDesde', <any>fechaDesde);
        }
        if (fechaHasta !== undefined && fechaHasta !== null) {
            queryParameters = queryParameters.set('fechaHasta', <any>fechaHasta);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OrdenesRsType>(`${this.basePath}/reporte/noOrdenes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ordenes Abiertas por mas Tiempo
     * 
     * @param headerRq Cabecera estandar
     * @param serviceID Service Id Kallsonys
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ordenesAbiertas(headerRq: string, serviceID: string, observe?: 'body', reportProgress?: boolean): Observable<Ordenes2RsType>;
    public ordenesAbiertas(headerRq: string, serviceID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ordenes2RsType>>;
    public ordenesAbiertas(headerRq: string, serviceID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ordenes2RsType>>;
    public ordenesAbiertas(headerRq: string, serviceID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (headerRq === null || headerRq === undefined) {
            throw new Error('Required parameter headerRq was null or undefined when calling ordenesAbiertas.');
        }

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling ordenesAbiertas.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (headerRq !== undefined && headerRq !== null) {
            queryParameters = queryParameters.set('headerRq', <any>headerRq);
        }
        if (serviceID !== undefined && serviceID !== null) {
            queryParameters = queryParameters.set('serviceID', <any>serviceID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Ordenes2RsType>(`${this.basePath}/reporte/ordenesAbiertas`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ordenes Cerradas con mas Dinero
     * 
     * @param headerRq Cabecera estandar
     * @param serviceID Service Id Kallsonys
     * @param fechaDesde Fecha desde (dd/mm/yyyy)
     * @param fechaHasta Fecha hasta (dd/mm/yyyy)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public ordenesCerradas(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'body', reportProgress?: boolean): Observable<Ordenes3RsType>;
    public ordenesCerradas(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Ordenes3RsType>>;
    public ordenesCerradas(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Ordenes3RsType>>;
    public ordenesCerradas(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (headerRq === null || headerRq === undefined) {
            throw new Error('Required parameter headerRq was null or undefined when calling ordenesCerradas.');
        }

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling ordenesCerradas.');
        }

        if (fechaDesde === null || fechaDesde === undefined) {
            throw new Error('Required parameter fechaDesde was null or undefined when calling ordenesCerradas.');
        }

        if (fechaHasta === null || fechaHasta === undefined) {
            throw new Error('Required parameter fechaHasta was null or undefined when calling ordenesCerradas.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (headerRq !== undefined && headerRq !== null) {
            queryParameters = queryParameters.set('headerRq', <any>headerRq);
        }
        if (serviceID !== undefined && serviceID !== null) {
            queryParameters = queryParameters.set('serviceID', <any>serviceID);
        }
        if (fechaDesde !== undefined && fechaDesde !== null) {
            queryParameters = queryParameters.set('fechaDesde', <any>fechaDesde);
        }
        if (fechaHasta !== undefined && fechaHasta !== null) {
            queryParameters = queryParameters.set('fechaHasta', <any>fechaHasta);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Ordenes3RsType>(`${this.basePath}/reporte/ordenesCerradas`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Productos mas Vendidos por fechas
     * 
     * @param headerRq Cabecera estandar
     * @param serviceID Service Id Kallsonys
     * @param fechaDesde Fecha desde (dd/mm/yyyy)
     * @param fechaHasta Fecha hasta (dd/mm/yyyy)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public productosVendidos(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'body', reportProgress?: boolean): Observable<ProductosRsType>;
    public productosVendidos(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProductosRsType>>;
    public productosVendidos(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProductosRsType>>;
    public productosVendidos(headerRq: string, serviceID: string, fechaDesde: string, fechaHasta: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (headerRq === null || headerRq === undefined) {
            throw new Error('Required parameter headerRq was null or undefined when calling productosVendidos.');
        }

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling productosVendidos.');
        }

        if (fechaDesde === null || fechaDesde === undefined) {
            throw new Error('Required parameter fechaDesde was null or undefined when calling productosVendidos.');
        }

        if (fechaHasta === null || fechaHasta === undefined) {
            throw new Error('Required parameter fechaHasta was null or undefined when calling productosVendidos.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (headerRq !== undefined && headerRq !== null) {
            queryParameters = queryParameters.set('headerRq', <any>headerRq);
        }
        if (serviceID !== undefined && serviceID !== null) {
            queryParameters = queryParameters.set('serviceID', <any>serviceID);
        }
        if (fechaDesde !== undefined && fechaDesde !== null) {
            queryParameters = queryParameters.set('fechaDesde', <any>fechaDesde);
        }
        if (fechaHasta !== undefined && fechaHasta !== null) {
            queryParameters = queryParameters.set('fechaHasta', <any>fechaHasta);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ProductosRsType>(`${this.basePath}/reporte/productosVendidos`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Buscar clientes que hayan comprado un producto
     * 
     * @param headerRq Cabecera estandar
     * @param serviceID Service Id Kallsonys
     * @param idProducto Id del producto a consultar
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clientesxProducto(headerRq: string, serviceID: string, idProducto: number, observe?: 'body', reportProgress?: boolean): Observable<DetallesCliente>;
    public clientesxProducto(headerRq: string, serviceID: string, idProducto: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DetallesCliente>>;
    public clientesxProducto(headerRq: string, serviceID: string, idProducto: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DetallesCliente>>;
    public clientesxProducto(headerRq: string, serviceID: string, idProducto: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (headerRq === null || headerRq === undefined) {
            throw new Error('Required parameter headerRq was null or undefined when calling clientesxProducto.');
        }

        if (serviceID === null || serviceID === undefined) {
            throw new Error('Required parameter serviceID was null or undefined when calling clientesxProducto.');
        }

        if (idProducto === null || idProducto === undefined) {
            throw new Error('Required parameter idProducto was null or undefined when calling clientesxProducto.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (headerRq !== undefined && headerRq !== null) {
            queryParameters = queryParameters.set('headerRq', <any>headerRq);
        }
        if (serviceID !== undefined && serviceID !== null) {
            queryParameters = queryParameters.set('serviceID', <any>serviceID);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DetallesCliente>(`${this.basePath}/reporte/clientesXProductos/${encodeURIComponent(String(idProducto))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
